1. explain what git is

2. installtion
download git 
github desktop 
setup github

3. basic commands
git config --global user.email
git config --global user.name
git init
add a file
git status
git add ./<file or directory name>
git commit -m <message> (message should be verb + action except the first commit, concise message)
git log --oneline

4. gitignore

5. Local vs remote
local vs remote
create ssh-key (to interact with remote repo)
create a git repo on github
git remote add origin <url> (the local dir name doesnt need to match to remote one)
git remote remove origin <url>
git remote -v
git push origin main
git pull origin main
git clone <url>

6. Branch
explain branch
git branch
git branch <branch name> + git checkout <branch name> = git checkout -b <branch name>
commit something and and switch out
add sth
git merge <branch name> (Note: this is still local)

7. Pull/merge request
git checkout -b <branch name>
make 2 commits 12 13 in one file (under 250 lines of code) and push to remote (explain why push to main is locked)
assign reviewer
merge on remote -> create an empty commit
pull the latest change

8. Merge conflicts and commit ordering by timestamp
switch to 2 branches, 14 15 on one, 16 17 on another, commit order 14->15->16->17, push both 
create pr for both -> merge one -> pull local main -> solve conflicts on the other -> merge other
switch to 2 branches, 18 19 on one, 20 21 on another, 18->20->19->21, push both 
repeat -> show the ordering problem with merge

9. Merge and Rebase
explain merge and rebase
git rebase <branch name>
switch to 2 branches, 22 23 on one, 24 25 on another, 22->24->23->25, push both
create pr for both -> merge one -> pull local main -> rebase to main-> merge other

10. Managing commits (very dangerous)
10.1. 
git reset <commit id> (soft, hard, local, remote)
git undo
git revert
git commit --amend
10.2.
git push origin <origin> --force
git rebase -i <commit id> (extremely dangerous to use)

11. Managing branches with git stash
explain git stash
git stash
git stash pop
